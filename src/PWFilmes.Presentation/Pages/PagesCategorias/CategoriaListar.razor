@page "/categoria/listar"
@using PWFilmes.Domain
@using System.Text.Json 

@inject HttpClient Http

<h3>CategoriaListar</h3>

<RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="true"
                FilterMode="FilterMode.Advanced"
                AllowSorting="true"
                PageSize="10"
                AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                Data="@categorias"
                TItem="Categoria"
                ColumnWidth="300px"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                GridLines="DataGridGridLines.Both">
    <Columns>
        <RadzenDataGridColumn TItem="Categoria" Property="Codigo" Title="Código" Width="100px" />
        <RadzenDataGridColumn TItem="Categoria" Property="Descricao" Title="Descrição" />
        <RadzenDataGridColumn TItem="Categoria" Property="Cor" Title="Cor" Width="80px" />
    </Columns>
</RadzenDataGrid>

@code {
    List<Categoria> categorias = new List<Categoria>(); // oq está entre<> é o "oq" da situação ex: Lista de categorias

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("api/Categoria/listar"); // faz a requisição para o servidor
        var content = await response.Content.ReadAsStringAsync(); // guarda o resultado no content em forma de string
        var option = new JsonSerializerOptions { PropertyNameCaseInsensitive = true }; // faz o C# ignorar a CaseSensitive
        categorias = JsonSerializer.Deserialize<List<Categoria>>(content,option); // serializer = converter json em classe especifica do C#, no caso convertendoa a lista de categoria

        await base.OnInitializedAsync();
    }
}
